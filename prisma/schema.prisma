// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id() @default(autoincrement())
  firstName  String
  lastName   String
  middleName String
  email      String    @unique
  phone      String    @unique
  employee   Employee?
  customer   Customer?

  memberOfEvents MemberOnEvent[]
}

model Employee {
  password String

  id     Int  @id @default(autoincrement())
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  roleId Int
  role   Role? @relation(fields: [roleId], references: [id])

  events Event[]
}

model Role {
  id        Int           @id() @default(autoincrement())
  name      String
  empployee Employee[]
  rights    RightOnRole[]
}

model Right {
  id   Int           @id @default(autoincrement())
  name String
  role RightOnRole[]
}

model RightOnRole {
  roleId  Int
  role    Role  @relation(fields: [roleId], references: [id], onDelete: Cascade)
  rightId Int
  right   Right @relation(fields: [rightId], references: [id], onDelete: Cascade)

  id Int @id() @default(autoincrement())
}

model Customer {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  requests CustomerRequest[]
}

model CustomerRequest {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  message String

  customerId Int
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

model Event {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  from DateTime
  to   DateTime

  ownerId Int
  owner   Employee @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  members MemberOnEvent[]
}

model MemberOnEvent {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  eventId Int
  event   Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
}
